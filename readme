Advanced Student Record Management System â€“ Feature Blueprint
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
Core Features (Base System)

1. Add New Student Record
2. Edit Student Record
3. Delete Student Record
4. Display All Records
5. Search record by Roll No or Name
6. Persistent File Storage (Binary format)

-------------------------------------------------------------------------

Advanced Functionalities
----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
1. Authentication System
   Password-protected admin login
   Passwords stored with simple encryption (e.g., XOR or custom cipher)

-------------------------------------------------------------------------
2. File Handling (Robust)
   Use of binary files for speed & compactness
   Backup & restore database from files
   Auto-save after every operation

-------------------------------------------------------------------------
3. Sorting Options
   Sort records by:
   Name
   Roll Number
   Marks (ascending/descending)
   Implement using qsort() or custom sort

-------------------------------------------------------------------------
4. Dynamic Memory Allocation
   Dynamically manage the student list in memory using malloc, realloc, and free
-------------------------------------------------------------------------

5. Input Validation & Error Handling
   Ensure names are alphabetic, marks are within range, roll numbers are    unique
   Handle incorrect file reads/writes
-------------------------------------------------------------------------

6. Log System (with Timestamps)
   Keep a log file of all operations with date & time
   Log who logged in, when, and what operations they did

-------------------------------------------------------------------------
7. CLI Menu-Driven Interface
   Clean and interactive menu for navigation
   Use clear screen, cursor movement (using system("cls") or system   ("clear"))

-------------------------------------------------------------------------
8. Modular Code Architecture
   Break code into:
   main.c
   student.c / student.h
   file_handler.c / file_handler.h
   auth.c / auth.h
   log.c / log.h
---------------------------------------------------------------------------
---------------------------------------------------------------------------
   Optional Extra Features (If Time Allows)
   Export data to .csv or .txt report
   Generate marksheet for each student
   Multi-user support (admin vs viewer access)



--------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------



Phase 1: Project Roadmap (with Timeline)
Phase	                                        Tasks	                                                    Estimated Time
---------------------------------------------------------------------------------------------------------------------------------------
1. Setup & Struct Design	                  File structure, struct Student, main                             1-2 hours
--------------------------------------------------------------------------------------------------------------------------------------
2. Core Functionalities	                      Add, Edit, Delete, Search, Display records	                    4-5 hours
----------------------------------------------------------------------------------------------------------------------------------------
3. File Handling	                          Save/load using binary files	                                    2-3 hours
-------------------------------------------------------------------------------------------------------------------------------------------
4. Sorting & Searching	                      Implement sort filters, search by fields	                        2-3 hours
-----------------------------------------------------------------------------------------------------------------------------------------
5. Authentication	                          Admin login with password encryption	                            2 hours
------------------------------------------------------------------------------------------------------------------------------------------
6. Logging System	                          Log user activity with timestamps	                                1-2 hours
---------------------------------------------------------------------------------------------------------------------------------------------
7. CLI UI Polishing	                          Clear screen, menus, UX	                                        1 hour
--------------------------------------------------------------------------------------------------------------------------------------------
8. Final Touches & Testing	                  Clean code, handle edge cases	                                    1-2 hours 
------------------------------------------------------------------------------------------------------------------------------------------


/\/\/\/\/\/\/\how to compile/\/\/\/\/\/\/\/\
--------------------------------------------
gcc main.c student.c -o student_mgmt
./student_mgmt
